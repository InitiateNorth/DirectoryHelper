<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DirectoryHelper</name>
    </assembly>
    <members>
        <member name="T:DirectoryHelper.DirectoryExtensions">
            <summary>
            Extension methods to help in dealing with the <see cref="T:System.DirectoryServices.DirectoryEntry"/> class.
            </summary>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.GetCollectionReference``1(System.DirectoryServices.PropertyCollection,System.String)">
            <summary>
            Gets a collection of reference typed properties for the specified attribute name.
            </summary>
            <typeparam name="T">The type we expect to be contained in the collection.</typeparam>
            <param name="properties">The properties to extract our values from.</param>
            <param name="attributeName">The name of the attribute to get the property values for.</param>
            <returns>
            A collection of properties, or null/empty if they cannot be found.
            </returns>
            <remarks>The collection may still contain null values, as we are using the friendly 'as' casting method.</remarks>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.GetCollectionReference``1(System.DirectoryServices.ResultPropertyCollection,System.String)">
            <summary>
            Gets a collection of reference typed properties for the specified attribute name.
            </summary>
            <typeparam name="T">The type we expect to be contained in the collection.</typeparam>
            <param name="properties">The properties to extract the values from.</param>
            <param name="attributeName">The name of the attribute to get the property values for.</param>
            <returns>
            A collection of properties, or null/empty if they cannot be found.
            </returns>
            <remarks>The collection may still contain null values, as we are using the friendly 'as' casting method.</remarks>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.GetReference``1(System.DirectoryServices.PropertyCollection,System.String,System.Int32)">
            <summary>
            Gets the value for the specified attribute name.
            </summary>
            <typeparam name="T">The return type the value should be cast to.</typeparam>
            <param name="properties">The properties to extract the value from.</param>
            <param name="attributeName">The name of the attribute to get the property value for.</param>
            <param name="index">The array index of the property we want to return (all properties are multi-valued).</param>
            <returns>The typed value of the property at the specified index if it can be found, otherwise null/empty.</returns>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.GetReference``1(System.DirectoryServices.ResultPropertyCollection,System.String,System.Int32)">
            <summary>
            Gets the value for the specified attribute name.
            </summary>
            <typeparam name="T">The return type the value should be cast to.</typeparam>
            <param name="properties">The properties to extract the value from.</param>
            <param name="attributeName">The name of the attribute to get the property value for.</param>
            <param name="index">The array index of the property we want to return (all properties are multi-valued).</param>
            <returns>The typed value of the property at the specified index if it can be found otherwise null/empty.</returns>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.GetValue``1(System.DirectoryServices.PropertyCollection,System.String,System.Int32)">
            <summary>
            Get a value typed property for the specified attribute name.
            </summary>
            <typeparam name="T">The return value type that should be returned.</typeparam>
            <param name="properties">The properties to extract the value from.</param>
            <param name="attributeName">The name of the attribute to get the property value for.</param>
            <param name="index">The array index of the proeprty we want to return (all properties are multi-valued).</param>
            <returns>The typed value of the property at the specified index if it can be found and cast, otherwise null/default.</returns>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.GetValue``1(System.DirectoryServices.ResultPropertyCollection,System.String,System.Int32)">
            <summary>
            Get a value typed property for the specified attribute name.
            </summary>
            <typeparam name="T">The return value type that should be returned.</typeparam>
            <param name="properties">The properties to extract the value from.</param>
            <param name="attributeName">The name of the attribute to get the property value for.</param>
            <param name="index">The array index of the proeprty we want to return (all properties are multi-valued).</param>
            <returns>The typed value of the property at the specified index if it can be found and cast, otherwise null/default.</returns>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.IsContactObject(System.DirectoryServices.DirectoryEntry)">
            <summary>
            Determines whether the <see cref="T:System.DirectoryServices.DirectoryEntry"/> is a contact object or not.
            </summary>
            <param name="entry">The <see cref="T:System.DirectoryServices.DirectoryEntry"/> to check.</param>
            <returns><c>True</c> if the object is a contact, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.IsUserObject(System.DirectoryServices.DirectoryEntry)">
            <summary>
            Determines whether the <see cref="T:System.DirectoryServices.DirectoryEntry"/> is a user object or not.
            </summary>
            <param name="entry">The <see cref="T:System.DirectoryServices.DirectoryEntry"/> to check.</param>
            <returns><c>True</c> if the object is a user, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.IsOlderThan(System.DirectoryServices.DirectoryEntry,System.TimeSpan)">
            <summary>
            Determines whether the <see cref="T:System.DirectoryServices.DirectoryEntry"/> is older than the specified time span.
            </summary>
            <param name="entry">The <see cref="T:System.DirectoryServices.DirectoryEntry"/> to check.</param>
            <param name="time">The time span we want to know if the object is older than.</param>
            <returns><c>True</c> if the object is older than the time span, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.ToSidString(System.Byte[])">
            <summary>
            Converts a byte array to a human readable SID.
            </summary>
            <param name="value">The SID byte array to convert.</param>
            <returns>The human readable SID if it can be converted, otherwise null.</returns>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.ToResolvedDomainAndUser(System.Byte[])">
            <summary>
            Resolves a byte array representing a SID to a human readable domain\user.
            </summary>
            <param name="value">The SID byte array to resolve.</param>
            <returns>The resolved domain and user in the form DOMAIN\user, or null if it cannot be resolved.</returns>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.IsSidResolvable(System.Byte[])">
            <summary>
            Determines whether a SID byte array can be resolved.
            </summary>
            <param name="value">The byte array to attempt to resolve.</param>
            <returns><c>True</c> if the value can be resolved, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.ToSecureString(System.String)">
            <summary>
            Converts a string value to a secure string.
            </summary>
            <param name="value">The input string to secure.</param>
            <returns>The secure version of the string.</returns>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.EqualsCaseInsensitive(System.String,System.String,System.StringComparison)">
            <summary>
            Compares two strings for equality ignoring case.
            </summary>
            <param name="source">The first string.</param>
            <param name="target">The second string.</param>
            <param name="comparison">Optional comparison allows for overriding of type of case ignored.</param>
            <returns><c>True</c> if the strings are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DirectoryHelper.DirectoryExtensions.ContainsCaseInsensitive(System.Collections.Generic.IEnumerable{System.String},System.String,System.StringComparison)">
            <summary>
            Checks a collection for case insensitive matches.
            </summary>
            <param name="source">The collection to check.</param>
            <param name="target">The string to match.</param>
            <param name="comparison">Optional comparison (default is case insensitive)</param>
            <returns><c>True</c> if the collection contains any instances of the string to match, otherwise <c>false</c>.</returns>
        </member>
    </members>
</doc>
